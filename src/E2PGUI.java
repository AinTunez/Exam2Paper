/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package exam2paper;

import javax.xml.parsers.*;
import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.text.BadLocationException;
import javax.swing.text.html.HTML;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;
import org.apache.commons.lang3.StringEscapeUtils;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;
public class E2PGUI extends javax.swing.JFrame {
    
    String title;
    List<Section> sections = new LinkedList<Section>() {};

    
    
    public E2PGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputArea = new javax.swing.JTextField();
        analyzeBtn = new javax.swing.JButton();
        printQuestionsBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();
        printCorrect = new javax.swing.JCheckBox();
        showPoints = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Exam2Paper");
        setResizable(false);

        inputArea.setToolTipText("");

        analyzeBtn.setText("Analyze");
        analyzeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeBtnActionPerformed(evt);
            }
        });

        printQuestionsBtn.setText("Refresh");
        printQuestionsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printQuestionsBtnActionPerformed(evt);
            }
        });

        outputArea.setColumns(20);
        outputArea.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        outputArea.setLineWrap(true);
        outputArea.setRows(5);
        outputArea.setTabSize(4);
        outputArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(outputArea);

        printCorrect.setText("Show correct answers");

        showPoints.setText("Show point values");

        jLabel1.setText(".DAT file:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(7, 7, 7)
                        .addComponent(inputArea, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzeBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(printCorrect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(printQuestionsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(analyzeBtn)
                    .addComponent(printCorrect)
                    .addComponent(showPoints)
                    .addComponent(printQuestionsBtn)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void analyzeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeBtnActionPerformed
        

        outputArea.setText("Analyzing, please wait...");
        sections.clear();
        try {
            File file = new File(inputArea.getText().trim());
            if(file.exists() && !file.isDirectory()) { 
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                Document doc = dBuilder.parse(file);
                // optional, but recommended // read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
                doc.getDocumentElement().normalize();
                NodeList sectionList = doc.getElementsByTagName("section");
                System.out.println(sectionList.getLength() + " section(s) found...");
                System.out.println("");
                for (int i = 0; i < sectionList.getLength(); i++) {                
                    Section section = processSection(sectionList.item(i));
                    section.title = "Section " + (i + 1);
                    System.out.println("Section \"" + section.title + "\" created with " + section.questions.size() + " questions.");
                    sections.add(section);                
                }                              
                System.out.println("------------");
                System.out.println("------------");            
                System.out.println("");
            }
        } catch (SAXException | IOException | ParserConfigurationException ex) {
            Logger.getLogger(E2PGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        printQuestions();
    }//GEN-LAST:event_analyzeBtnActionPerformed

    private void printQuestionsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printQuestionsBtnActionPerformed
        printQuestions();
        
    }//GEN-LAST:event_printQuestionsBtnActionPerformed

    public void printQuestions() {
        outputArea.setText("");
        boolean key = printCorrect.isSelected();
        boolean points = showPoints.isSelected();
                
        for (Section section : sections) {            
            section.printSection(outputArea, key, points);
        }
        
        String text;
        text = outputArea.getText().replaceAll("\\<[^>]*>","");
        text =  StringEscapeUtils.unescapeHtml4(text);
        outputArea.setText(text);
    }
    
    public Section processSection(Node sectionNode) {
        System.out.println("Processing section node...");
        System.out.println("");
        
        NodeList nodes = sectionNode.getChildNodes();                            
        Section section = new Section();                
        
        for (int i = 1; i < nodes.getLength(); i++) {
            if (nodes.item(i).getNodeName().equals("item")) {
                Question q = processItem(nodes.item(i));                                
                section.addQuestion(q);                
            }
        }        
        return section;
    }
    
    public Question processItem (Node itemNode) {        
        System.out.println("Processing item node..." + System.lineSeparator());        
        
        //define the item's primary nodes and cast the item itself as an element
        NodeList nodes = itemNode.getChildNodes();
        Element metadata = (Element) nodes.item(0);                       
        String questionType = getChildText(metadata,"bbmd_questiontype");

        switch (questionType) {
            case "Multiple Choice":
                return processMcQuestion(itemNode);
            case "Multiple Answer":
                return processMaQuestion(itemNode);
            case "Fill in the Blank":
                return processFibQuestion(itemNode);
            case "Short Response":
                return processSrQuestion(itemNode);
            case "Essay":
                return processSrQuestion(itemNode);
        }                
        return null;
    }
    
    public Question processMcQuestion (Node itemNode) {
        
        NodeList nodes = itemNode.getChildNodes();
        Element presentation = (Element) nodes.item(1);
        Element resprocessing = (Element) nodes.item(2);       
        Element item = (Element) itemNode;            

        Node block = presentation.getFirstChild();
        Node questionBlock = block.getFirstChild();
        Node responseBlock = questionBlock.getNextSibling();

        McQuestion question = new McQuestion();
        question.title = item.getAttribute("title");        
        question.questionText = questionBlock.getTextContent();

        System.out.println(question.questionText);

        Node responseLid = responseBlock.getFirstChild();
        Node renderChoice = responseLid.getFirstChild();

        NodeList responseList = renderChoice.getChildNodes();

        for (int i = 0; i < responseList.getLength(); i++) {
            McAnswer answer = processMcResponse(responseList.item(i));
            question.addAnswer(answer);
        }

        Node outcomesN = resprocessing.getFirstChild();
        Element outcomesE = (Element) outcomesN.getFirstChild();
        String pointsString = outcomesE.getAttribute("maxvalue");
        System.out.println(pointsString + " points");
        Float pointsNum = Float.parseFloat(pointsString);
        question.points = pointsNum;                      

        Node correct = outcomesN.getNextSibling().getFirstChild();
        String correctAnswerLabel = correct.getTextContent();           
        question.correctAnswerLabel = correctAnswerLabel;           

        System.out.println("-----------------------");
        return question;
    }
    
    public McAnswer processMcResponse (Node flowLabel){
        
        Node responseNode = flowLabel.getFirstChild();                
        Element responseElement = (Element) responseNode;            
        String label = responseElement.getAttribute("ident");
        String answerText = responseElement.getTextContent();
        System.out.println("-" + answerText);
        
        McAnswer answer = new McAnswer(answerText,label);        
        return answer;
    }
    
    public Question processMaQuestion (Node itemNode) {
        
        NodeList nodes = itemNode.getChildNodes();
        Element presentation = (Element) nodes.item(1);
        Element resprocessing = (Element) nodes.item(2);       
        Element item = (Element) itemNode;            

        Node block = presentation.getFirstChild();
        Node questionBlock = block.getFirstChild();
        Node responseBlock = questionBlock.getNextSibling();

        MaQuestion question = new MaQuestion();
        question.title = item.getAttribute("title");        
        question.questionText = questionBlock.getTextContent();

        System.out.println(question.questionText);

        Node responseLid = responseBlock.getFirstChild();
        Node renderChoice = responseLid.getFirstChild();

        NodeList responseList = renderChoice.getChildNodes();

        for (int i = 0; i < responseList.getLength(); i++) {
            MaAnswer answer = processMaResponse(responseList.item(i));
            question.addAnswer(answer);
        }

        Node outcomesN = resprocessing.getFirstChild();
        Element outcomesE = (Element) outcomesN.getFirstChild();
        String pointsString = outcomesE.getAttribute("maxvalue");
        System.out.println(pointsString + " points");
        Float pointsNum = Float.parseFloat(pointsString);
        question.points = pointsNum;                      

        Node conditionvar = outcomesN.getNextSibling().getFirstChild();
        NodeList conditionList = conditionvar.getFirstChild().getChildNodes();
        for (int i = 0; i < conditionList.getLength(); i++) {
            Node child = conditionList.item(i);            
            if (!child.getNodeName().equals("not")) {
                question.correctAnswerLabels.add(child.getTextContent());
            }
        }                   

        System.out.println("-----------------------");
        return question;
    }
    
    public MaAnswer processMaResponse (Node flowLabel){
        
        Node responseNode = flowLabel.getFirstChild();                
        Element responseElement = (Element) responseNode;            
        String label = responseElement.getAttribute("ident");
        String answerText = responseElement.getTextContent();
        System.out.println("-" + answerText);
        
        MaAnswer answer = new MaAnswer(answerText,label);        
        return answer;
    }

    public Question processFibQuestion (Node itemNode) {
        
        NodeList nodes = itemNode.getChildNodes();
        Element presentation = (Element) nodes.item(1);
        Element resprocessing = (Element) nodes.item(2);       
        Element item = (Element) itemNode;            

        Node block = presentation.getFirstChild();
        Node questionBlock = block.getFirstChild();        

        FibQuestion question = new FibQuestion();
        question.title = item.getAttribute("title");        
        question.questionText = questionBlock.getTextContent();
        
        System.out.println(question.questionText);               

        NodeList responseList = resprocessing.getElementsByTagName("respcondition");
        for (int i = 0; i < responseList.getLength(); i++) {
            Element e = (Element) responseList.item(i);
            if (!e.getAttribute("title").equals("incorrect")) {
                String answer = processFibResponse(responseList.item(i));
                question.addAnswer(answer);                
            }
        }

        Node outcomesN = resprocessing.getFirstChild();
        Element outcomesE = (Element) outcomesN.getFirstChild();
        String pointsString = outcomesE.getAttribute("maxvalue");
        System.out.println(pointsString + " points");
        Float pointsNum = Float.parseFloat(pointsString);
        question.points = pointsNum;                      

          

        System.out.println("-----------------------");
        return question;
    }
    
    public String processFibResponse (Node flowLabel){
        
        Node responseNode = flowLabel.getFirstChild();                
        Element responseElement = (Element) responseNode;        
        String answerText = responseElement.getTextContent();
        System.out.println("-" + answerText);
                
        return answerText;
    }
    
    public Question processSrQuestion (Node itemNode) {
        
        System.out.println("Processing question");
        NodeList nodes = itemNode.getChildNodes();
        Element presentation = (Element) nodes.item(1);
        Element resprocessing = (Element) nodes.item(2);       
        Element item = (Element) itemNode;            

        Node block = presentation.getFirstChild();
        Node questionBlock = block.getFirstChild();

        SrQuestion question = new SrQuestion();
        question.title = item.getAttribute("title");        
        question.questionText = questionBlock.getTextContent();

        System.out.println(question.questionText);
    
        Node outcomesN = resprocessing.getFirstChild();
        Element outcomesE = (Element) outcomesN.getFirstChild();
        String pointsString = outcomesE.getAttribute("maxvalue");
        System.out.println(pointsString + " points");
        Float pointsNum = Float.parseFloat(pointsString);
        question.points = pointsNum;                               

        System.out.println("-----------------------");
        return question;
    }
    

    //returns child element by name
    public Element getChild(Element parent, String childName) {
        
        NodeList nList = parent.getElementsByTagName("*");        
        for(int i = 0; i < nList.getLength(); i++) {
            if (nList.item(i).getNodeName().equals(childName)) {
                return (Element)nList.item(i);
            }
        }
        return null;        
    }
    
    //returns the text of a child element by name
    public String getChildText(Element parent, String childName) {
        
        NodeList nList = parent.getElementsByTagName("*");        
        for(int i = 0; i < nList.getLength(); i++) {
            if (nList.item(i).getNodeName().equals(childName)) {
                String s = nList.item(i).getTextContent();                
                return s;
            }
        }
        return null;
    }            
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
             UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(E2PGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new E2PGUI().setVisible(true);
            }
        });        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analyzeBtn;
    private javax.swing.JTextField inputArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea outputArea;
    private javax.swing.JCheckBox printCorrect;
    private javax.swing.JButton printQuestionsBtn;
    private javax.swing.JCheckBox showPoints;
    // End of variables declaration//GEN-END:variables
}
